name: Provision Infra and Deploy Frontend to GKE

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  GKE_CLUSTER: 'autopilot-cluster-stage' # Nome definido no seu arquivo terraform (infra/main.tf)
  GKE_LOCATION: 'us-central1'         # Localização definida no seu arquivo terraform (infra/main.tf)
  IMAGE: frontend-react                # Nome da imagem Docker para o frontend

permissions:
  contents: read
  id-token: write # Permissão necessária para autenticação segura no GCP

jobs:
  #subindo frontend
  # --- JOB 1: GARANTE QUE A INFRAESTRUTURA E CONFIGS K8S ESTEJAM ATUALIZADAS ---
#  provision-infrastructure:
#    name: Provision GKE Cluster & K8s Config
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Setup Google Cloud CLI
#        uses: google-github-actions/auth@v1
#        with:
#          credentials_json: ${{ secrets.GCP_SA_KEY }}
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v2
#
#      - name: Terraform Init & Apply (Infra)
#        run: |
#          terraform init
#          terraform apply -auto-approve
#        working-directory: ./infra # Executa na pasta de infra para garantir que o cluster exista
#
#      - name: Get GKE credentials for K8s provider
#        uses: google-github-actions/get-gke-credentials@v1
#        with:
#          cluster_name: ${{ env.GKE_CLUSTER }}
#          location: ${{ env.GKE_LOCATION }}
#
#      - name: Terraform Init & Apply (K8s Config)
#        run: |
#          terraform init
#          terraform apply -auto-approve
#        working-directory: ./k8s # Executa na pasta k8s para garantir que os namespaces existam

  # --- JOB 2: BUILD E DEPLOY DO FRONTEND (DEPENDE DO JOB 1) ---
  build-and-deploy-frontend:
    name: Build and Deploy Frontend Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: . # Assume que o Dockerfile do frontend está na raiz deste repositório
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Setup Google Cloud CLI
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Get GKE credentials for kubectl
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_LOCATION }}

      # Atualiza a tag da imagem no arquivo de deployment
      - name: Update image tag in deployment file
        run: |
          sed -i 's|image: .*|image: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE }}:${{ github.sha }}|g' kubernetes/frontend-deployment.yaml

      # Deploy no Kubernetes usando os arquivos de manifesto
      - name: Deploy to GKE
        run: |
          kubectl apply -f kubernetes/frontend-deployment.yaml
          kubectl apply -f kubernetes/frontend-service.yaml
          kubectl apply -f kubernetes/postgres-pvc.yaml -n production
          kubectl apply -f kubernetes/postgres-secrets.yaml -n production
          kubectl apply -f kubernetes/postgres-deployment.yaml -n production
          kubectl apply -f kubernetes/postgres-service.yaml -n production
          kubectl rollout restart deployment frontend-deployment -n production